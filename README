Author - Alec Thompson - ajthompson@wpi.edu
Author - Troy Hughes - thhughes@wpi.edu
Class - CS2303 - Systems Programming Concepts
Assignment - Program 5 - A Simulation of MANET Source Routing in C++
Language - C++

How To Build - 
	Enter the following into terminal:
		
		make && make clean

	This will result in an executable under the name of program5

	NOTE: A compiler warning about a double being cast to an integer will occur.  This is because we make use of the <cmath> function pow, which only operates on doubles in versions of C++ earlier than C++11.

	We cast integer values to doubles in the function that uses this, and the result gets cast back to an integer.  This was necessary to ensure compatibility with the woefully outdated version of gcc on all but one of the CCC servers.  Why they would update only one is beyond me...

How To Run -
	Enter the following into terminal:

		./program5 sources receivers mules dimension < input.txt

	Where the fields are as follows:

		sources - number of source routers
		receivers - number of receiver routers
		mules - number of mule routers - MUST BE A MULTIPLE OF 4
		dimension - one side of the square area a mule maneuvers on - MUST BE GREATER THAN BOTH THE NUMBER OF SOURCES AND RECEIVERS

		input.txt - text file of data in the following format

			sourceID arrival_time packets pkt_size SR_size SR

		Where the fields are as follows:

			sourceID - ID of the source this applies to
			arrival_time - time the source begins transmitting
			packets - number of packets to be transmitted
			pkt_size - size of the packets to be transmitted
			SR_size - length of the route the packets will take, including the source
			SR - list of sourceIDs of length SR_size starting with the source node and ending with a receiver node

		The number of lines of text in the file must be no more than the number of fields, and there must be no more than one line with the same sourceID

Program Notes:
	
	Main: 
		Reads in the arguments, and uses three methods to create the randomized positions for the sources receivers and nodes. Then the program creates the event list, initialized with the command line arguments.  After this, the method process() is called on the event list. This function controls the entirety of the rest of the program.